{"pageProps":{"note":{"id":"6qoeufgmgbzekihukmsdqe5","title":"Binary Tree","desc":"","updated":1667656985620,"created":1667656985620,"custom":{},"fname":"dev.dsa.binarytree","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"e285533bea1301c555b599b36acd3c86","links":[],"anchors":{"이진-트리의-최대-깊이":{"type":"header","text":"이진 트리의 최대 깊이","value":"이진-트리의-최대-깊이","line":8,"column":0,"depth":2},"이진-트리의-지름":{"type":"header","text":"이진 트리의 지름","value":"이진-트리의-지름","line":32,"column":0,"depth":2},"이진-트리의-높이":{"type":"header","text":"이진 트리의 높이","value":"이진-트리의-높이","line":54,"column":0,"depth":2},"이진-트리의-최소-깊이":{"type":"header","text":"이진 트리의 최소 깊이","value":"이진-트리의-최소-깊이","line":77,"column":0,"depth":3},"이진-트리-순회":{"type":"header","text":"이진 트리 순회","value":"이진-트리-순회","line":98,"column":0,"depth":2}},"children":[],"parent":"n1xmefdyaaztqb8wmsmqtjj","data":{}},"body":"<h1 id=\"binary-tree\">Binary Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-tree\"></a></h1>\n<h2 id=\"이진-트리의-최대-깊이\">이진 트리의 최대 깊이<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#이진-트리의-최대-깊이\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    queue <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        depth <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 큐 연산 추출 노드의 자식 노드 삽입</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur_root <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> cur_root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur_root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> cur_root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur_root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># BFS 반복 횟수 == 깊이</span>\n    <span class=\"token keyword\">return</span> depth\n</code></pre>\n<h2 id=\"이진-트리의-지름\">이진 트리의 지름<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#이진-트리의-지름\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">nonlocal</span> diameter\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n        left <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        right <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n        diameter <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>diameter<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    diameter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    dfs<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> diameter\n</code></pre>\n<h2 id=\"이진-트리의-높이\">이진 트리의 높이<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#이진-트리의-높이\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n \t<span class=\"token keyword\">if</span> root <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">def</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\th <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tqueue <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tcurr_node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> curr_node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n\t\t\t\tqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>curr_node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> curr_node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n\t\t\t\tqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>curr_node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t\th <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">return</span> h\n</code></pre>\n<h3 id=\"이진-트리의-최소-깊이\">이진 트리의 최소 깊이<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#이진-트리의-최소-깊이\"></a></h3>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">and</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>minDepth<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> minDpeth<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> minDepth<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">or</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">def</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n \tqueue <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>dqeue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t<span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n \t\tnode<span class=\"token punctuation\">,</span> level <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \t\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">:</span>\n \t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n \t\t\t\t<span class=\"token keyword\">return</span> level\n \t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n \t\t\t\tqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t\t\t\tqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"이진-트리-순회\">이진 트리 순회<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#이진-트리-순회\"></a></h2>\n<ul>\n<li>전위(Pre-order) 순회: NLR</li>\n<li>중위(In-order) 순회: LNR</li>\n<li>후위(Post-order) 순회: LRN</li>\n<li>Recursion</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n\tpreorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\tpreorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">def</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span>\n\tinorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n\tinorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">def</span> <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span>\n\tpostorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\tpostorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\tpostorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>Iterative</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">traverse_preorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">def</span> <span class=\"token function\">traverse_inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    node <span class=\"token operator\">=</span> root\n    <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">or</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n\n        node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n</code></pre>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">postOrderIterative</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    node <span class=\"token operator\">=</span> root\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> stack<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n        node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 현재 노드의 첫번째 방문일때, 오른쪽으로 이동</span>\n        <span class=\"token keyword\">if</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> node<span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n        <span class=\"token comment\"># 현재 노드를 두번째 방문 했을때 출력한다.</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visited\"</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># The first is by postorder using a flag to indicate whether the node has been visited or not.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \t\n \ttraversal<span class=\"token punctuation\">,</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n \t<span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n \t\tnode<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \t\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">:</span>\n \t\t\t<span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">:</span>\n \t\t\t\t<span class=\"token comment\"># add to result if visited</span>\n \t\t\t\ttraversal<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n \t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n \t\t\t\t<span class=\"token comment\"># post-order</span>\n \t\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \t\n \t<span class=\"token keyword\">return</span> traversal\n \n \n<span class=\"token comment\"># The 2nd uses modified preorder (right subtree first). Then reverse the result.</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttraversal<span class=\"token punctuation\">,</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n\t\tnode <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\"># pre-order, right-first</span>\n\t\t\ttraversal<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\t\t\tstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\"># reverse result</span>\n\t<span class=\"token keyword\">return</span> traversal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>","noteIndex":{"id":"rfaecb1r4pxpahsrighqpfi","title":"Dev","desc":"","updated":1666489926104,"created":1666489926104,"custom":{"nav_order":0,"permalink":"/"},"fname":"dev","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"5f3d9b993bc1c60c0e10119b00a45c49","links":[],"anchors":{},"children":["vmcgt1bw13lwsobet50r3vl","pj0dbesw2qm5j1tub9f34pg","e40hlh2wukm75vo4t8r9c7p","7xwnx64er01irhu8wg1q5zm","4buyekecqhzdg87aqxmh1rz","n1xmefdyaaztqb8wmsmqtjj","d8p9jq81rc0pfbbuzz7prah","yq2839iijurmzkrwkqwo9ps","51sfhirev9l2r8bef9utfb9","xuw6kyksesfaatsmt3gctyi","njc2zpmxz8izls7ogwdj20h","d3ma1d2r59fhejrl6bn9g0e","tgd9pt1fu1j4ejm4g09vlx4","5jlkrg4hx6dpy5tr55grkh6","ockg1gb78gpshwty5zjmvue","owsm2ti22dslhpk9oduhhku","52x2zgp7jpygai1h0jpv0t8","2d5oqog2rsdfdogne54tq9t"],"parent":null,"data":{},"body":""},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["dev","about"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Golbang Hacker","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/pks-publish","siteUrl":"https://b2sdev.github.io","theme":"dark","siteFaviconPath":"favicon.ico","siteIndex":"dev"}}},"__N_SSG":true}