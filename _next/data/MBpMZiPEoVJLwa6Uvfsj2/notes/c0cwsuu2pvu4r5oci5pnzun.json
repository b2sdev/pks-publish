{"pageProps":{"note":{"id":"c0cwsuu2pvu4r5oci5pnzun","title":"Graph","desc":"","updated":1669269373703,"created":1542634080000,"custom":{},"fname":"dev.dsa.graph","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"79cef85fc5d1383e401b865c68422d80","links":[],"anchors":{"what":{"type":"header","text":"What","value":"what","line":8,"column":0,"depth":2},"그래프-탐색":{"type":"header","text":"그래프 탐색","value":"그래프-탐색","line":38,"column":0,"depth":2},"graph-with-adjacent-list-and-dfs":{"type":"header","text":"Graph with adjacent list and DFS","value":"graph-with-adjacent-list-and-dfs","line":45,"column":0,"depth":2}},"children":["qyv06vs1dfadlk7elwdy6mz","axrt8l0r3u8a8au2tb2b5cq","627foyc09213sefsc4jv14s"],"parent":"n1xmefdyaaztqb8wmsmqtjj","data":{}},"body":"<h1 id=\"graph\">Graph<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graph\"></a></h1>\n<h2 id=\"what\">What<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what\"></a></h2>\n<pre><code>개체들 사이의 일대일 관계를 시각적으로 표현하는 수학적 모델\n그래프는 vertex(꼭지점, 정점)와 edge(간선)의 집합\nG = (V, E)\n\tV: Vertex는 개체를 나타냄\n\tE: Edge는 일대일 관계를 나타냄\n\t   Edge는 vertex의 쌍으로 표현됨\n그래프의 수학적/시각적 표현\n\tV = {0, 1, 2, 3}\n\tE = {(0,2), (0,3), (1,2), (1,3)))}\nEdge 리스트를 이용한 표현\n\t4, 4 // vertex의 수, edge의 수\n\t0, 2\n\t0, 3\n\t1, 2\n\t1, 3\n\t\n용어\nvertex\n하나의 개체를 표현~~~~\nedge\nvertex와 verte의 1:1 관계 -> (0, 1)\npath\ncycle\n첫 번째 vertex와 마지막 vertex가 일치하는 단순 경로\nconnected acylic graph = tree\n</code></pre>\n<h2 id=\"그래프-탐색\">그래프 탐색<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#그래프-탐색\"></a></h2>\n<ul>\n<li>깊이 우선 탐색\n<ul>\n<li>재귀-간단</li>\n<li>다른 인접 노드를 방문하기 전에 특정한 인접 노드를 깊이 있게 탐색</li>\n</ul>\n</li>\n<li>너비 우선 탐색\n<ul>\n<li>최단 경로</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"graph-with-adjacent-list-and-dfs\">Graph with adjacent list and DFS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graph-with-adjacent-list-and-dfs\"></a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Interger</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertex<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">;</span>\n    vertex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> vertex<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vertex<span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Depth First Traversal: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> startIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> startIndex <span class=\"token operator\">&#x3C;</span> vertex<span class=\"token punctuation\">;</span> startIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        visited<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> nodeIndex <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>nodeIndex <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> adjacent <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>nodeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> adjacent<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> dest <span class=\"token operator\">=</span> adjacent<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>dest<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              visited<span class=\"token punctuation\">[</span>dest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">printGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token punctuation\">.</span><span class=\"token function\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/pks-publish/notes/qyv06vs1dfadlk7elwdy6mz\">Dijkstra</a></li>\n<li><a href=\"/pks-publish/notes/axrt8l0r3u8a8au2tb2b5cq\">Kruskal (TBD)</a></li>\n<li><a href=\"/pks-publish/notes/627foyc09213sefsc4jv14s\">Prim (TBD)</a></li>\n</ol>","noteIndex":{"id":"rfaecb1r4pxpahsrighqpfi","title":"Dev","desc":"","updated":1666489926104,"created":1666489926104,"custom":{"nav_order":0,"permalink":"/"},"fname":"dev","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"5f3d9b993bc1c60c0e10119b00a45c49","links":[],"anchors":{},"children":["vmcgt1bw13lwsobet50r3vl","pj0dbesw2qm5j1tub9f34pg","e40hlh2wukm75vo4t8r9c7p","7xwnx64er01irhu8wg1q5zm","4buyekecqhzdg87aqxmh1rz","n1xmefdyaaztqb8wmsmqtjj","d8p9jq81rc0pfbbuzz7prah","yq2839iijurmzkrwkqwo9ps","51sfhirev9l2r8bef9utfb9","xuw6kyksesfaatsmt3gctyi","njc2zpmxz8izls7ogwdj20h","d3ma1d2r59fhejrl6bn9g0e","tgd9pt1fu1j4ejm4g09vlx4","5jlkrg4hx6dpy5tr55grkh6","ockg1gb78gpshwty5zjmvue","owsm2ti22dslhpk9oduhhku","52x2zgp7jpygai1h0jpv0t8","2d5oqog2rsdfdogne54tq9t"],"parent":null,"data":{},"body":""},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["dev","about"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Golbang Hacker","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/pks-publish","siteUrl":"https://b2sdev.github.io","theme":"dark","siteFaviconPath":"favicon.ico","siteIndex":"dev"}}},"__N_SSG":true}