{"pageProps":{"note":{"id":"rc5ks6o8knqqwbdlubjye6d","title":"Data Query Patterns","desc":"","updated":1693656429946,"created":1692968541450,"custom":{},"fname":"dev.architecture.microservices.data-query-patterns","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"5473241163ad99d0389b47db350ee3fd","links":[],"anchors":{"question":{"type":"header","text":"Question","value":"question","line":8,"column":0,"depth":2},"answer":{"type":"header","text":"Answer","value":"answer","line":11,"column":0,"depth":2},"api-조합-패턴":{"type":"header","text":"API 조합 패턴","value":"api-조합-패턴","line":16,"column":0,"depth":3},"what":{"type":"header","text":"What","value":"what","line":17,"column":0,"depth":4},"how":{"type":"header","text":"HOW","value":"how","line":22,"column":0,"depth":4},"cqrs-패턴":{"type":"header","text":"CQRS 패턴","value":"cqrs-패턴","line":31,"column":0,"depth":3},"what-1":{"type":"header","text":"What","value":"what-1","line":32,"column":0,"depth":4},"패턴-선택":{"type":"header","text":"패턴 선택","value":"패턴-선택","line":41,"column":0,"depth":3},"reference":{"type":"header","text":"Reference","value":"reference","line":45,"column":0,"depth":2}},"children":[],"parent":"q5aynjvtl8ck5i8o4z1789a","data":{}},"body":"<h1 id=\"data-query-patterns\">Data Query Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-query-patterns\"></a></h1>\n<h2 id=\"question\">Question<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#question\"></a></h2>\n<p>모놀리식 애플리케이션은 전체 데이터가 하나의 DB에 있기 때문에 SELECT 문으로 여러 테이블을 조인하는 쿼리를 작성할 수 있습니다. 마이크로서비스는 각 서비스마다 각자 DB를 갖는데 각 서비스가 소유한 데이터를 조인하는 쿼리를 어떻게 구현할 수 있을까요?</p>\n<h2 id=\"answer\">Answer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#answer\"></a></h2>\n<p>마이크로서비스 아키텍처에서는 다음 두 가지 패턴으로 쿼리를 구현합니다.</p>\n<ul>\n<li>API 조합(composition) 패턴: 서비스 클라이언트가 데이터를 가진 여러 서비스를 직접 호출하여 그 결과를 조합하는 패턴입니다.</li>\n<li>CQRS(Command Query Responsibility Segregation, 커맨드 쿼리 책임 분산) 패턴: 쿼리만 지원하는 하나 이상의 뷰(view) 전용 데이터 레플리카(replica, 사본/복제본)를 유지하는 패턴입니다.</li>\n</ul>\n<h3 id=\"api-조합-패턴\">API 조합 패턴<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#api-조합-패턴\"></a></h3>\n<h4 id=\"what\">What<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what\"></a></h4>\n<p>여러 서비스에 있는 데이터를 API를 통해 조회하고 그 결과를 조합하여 쿼리를 구현합니다.</p>\n<div style=\"text-align:center\"><img src=\"https://microservices.io/i/data/ApiBasedQueryBigPicture.png\"></div>\n<h4 id=\"how\">HOW<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how\"></a></h4>\n<p>데이터를 조합하는 API 조합기는 세 가지 옵션이 있습니다.</p>\n<p>첫째, 웹 애플리케이션처럼 웹 페이지에 데이터를 렌더링하는 서비스 클라이언트를 API 조합기로 임명하는 것입니다.</p>\n<p>둘째, 애플리케이션의 외부 API가 구현된 API 게이트웨이를 API 조합기로 만드는 것입니다.</p>\n<p>셋째, API 조합기를 스탠드얼론 서비스로 구현하는 것입니다.</p>\n<h3 id=\"cqrs-패턴\">CQRS 패턴<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cqrs-패턴\"></a></h3>\n<h4 id=\"what-1\">What<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-1\"></a></h4>\n<p>여러 서비스에 있는 데이터를 가져오는 쿼리는 (이벤트를 이용하여) 해당 서비스의 데이터를 복제한 읽기 전용 뷰를 유지합니다.</p>\n<div style=\"text-align:center\"><img src=\"https://miro.medium.com/v2/resize:fit:3712/1*KtVJ1SVJSQWE9DOafLU8bw.png\"></div><br>\n<p>이 패턴은 영속적 데이터 모델과 그것을 사용하는 모듈을 커맨드와 쿼리, 두 편으로 가릅니다. 조회(R) 기능(예: HTTP GET)은 쿼리 쪽 모듈 및 데이터 모델에, 생성/수정/삭제(CUD) 기능(예: HTTP POST, PUT, DELETE)은 커맨드 쪽 모듈 및 데이터 모델에 구현하는 것입니다. 양쪽 데이터 모델 사이의 동기화는 커맨드 쪽에서 발행한 이벤트를 쿼리 쪽에서 구독하는 식으로 이루어집니다.</p>\n<div style=\"text-align:center\"><img src=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*60XHay_uTUyV-hwDJBTIug.png\">이미지 출처: https://medium.com/the-legend/cqrs-81b2de39dfd5</div>\n<h3 id=\"패턴-선택\">패턴 선택<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#패턴-선택\"></a></h3>\n<p>API 조합 패턴을 이용하면 여러 서비스에 있는 데이터를 조회하는 쿼리를 쉽게 구현할 수 있습니다. 가급적 이 방법을 쓰는 것이 좋습니다.\n그러나, API 조합 패턴만으로는 효율적으로 구현하기 어려운 (가령 거대한 데이터 뭉치를 인-메모리 조인하는) 다중 서비스 쿼리인 경우 CQRS 패턴을 사용하는 것이 바람직합니다. CQRS 패턴은 API 조합 패턴보다 강력한 만큼 구현하기는 더 복잡합니다.</p>\n<h2 id=\"reference\">Reference<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reference\"></a></h2>\n<ul>\n<li>크리스 리처드슨, &#x3C;마이크로서비스 패턴>, 길벗</li>\n</ul>","noteIndex":{"id":"rfaecb1r4pxpahsrighqpfi","title":"Dev","desc":"","updated":1666489926104,"created":1666489926104,"custom":{"nav_order":0,"permalink":"/"},"fname":"dev","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"5f3d9b993bc1c60c0e10119b00a45c49","links":[],"anchors":{},"children":["vmcgt1bw13lwsobet50r3vl","pj0dbesw2qm5j1tub9f34pg","e40hlh2wukm75vo4t8r9c7p","7xwnx64er01irhu8wg1q5zm","4buyekecqhzdg87aqxmh1rz","n1xmefdyaaztqb8wmsmqtjj","d8p9jq81rc0pfbbuzz7prah","yq2839iijurmzkrwkqwo9ps","51sfhirev9l2r8bef9utfb9","xuw6kyksesfaatsmt3gctyi","njc2zpmxz8izls7ogwdj20h","d3ma1d2r59fhejrl6bn9g0e","tgd9pt1fu1j4ejm4g09vlx4","5jlkrg4hx6dpy5tr55grkh6","ockg1gb78gpshwty5zjmvue","owsm2ti22dslhpk9oduhhku","52x2zgp7jpygai1h0jpv0t8","2d5oqog2rsdfdogne54tq9t"],"parent":null,"data":{},"body":""},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["dev","about"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Golbang Hacker","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/pks-publish","siteUrl":"https://b2sdev.github.io","theme":"dark","siteFaviconPath":"favicon.ico","siteIndex":"dev"}}},"__N_SSG":true}